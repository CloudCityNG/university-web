%h1
  = "#{@assignment.name} Review"
  = " (#{@review.submission.user.name})" if current_user != @review.submission.user

  - if @review.closed?
    %h2 This review is closed.

%p= @review.description

%h3 Comments

#comments
  - @review.comments.order('created_at').each do |comment|
    .comment{:data => {:id => comment.id}}
      .header
        = image_tag comment.user.gravatar_url(24)
        = comment.user.name
        .controls
          - if current_user == comment.user
            = link_to_function '', 
              %{$(".comment[data-id=#{comment.id}] .content").click()}, 
              :class => "edit", :title => "Edit"
            = link_to '', comment_path(comment),
              :class   => "remove", :title  => "Delete",
              :method  => :delete,  :remote => true,
              :confirm => "Are you sure you wish to delete this comment?"
        
      .content= comment.to_html.html_safe
      - if current_user == comment.user
        :javascript
          $(".comment[data-id=#{comment.id}] .content").
          editable('#{comment_path(comment.id)}', {
            type:      'textarea',
            method:    'PUT',
            indicator: 'Saving ...',
            cancel:    'Cancel',
            submit:    'Save',
            loadurl:   '#{comment_path(comment.id)}',
            width:     '905px'    
          });
  - if @review.comments.empty?
    %h4 There are currently no comments!
  
  = form_for @review.comments.build, 
    :url => comment_assignment_review_path(@assignment, @review) do |f|

    %p= f.text_area :comment_text
    %p= f.submit "Post comment"

.clear

- if @review.course.instructors.include?(current_user) && !@review.closed?
  
  %hr

  = form_for @review, :url => assignment_review_path(@assignment, @review) do |f|
    = f.submit "Close Review"
    = f.fields_for @review.submission do |s|
      = s.select :submission_status_id,
        SubmissionStatus.order('sort_order').map {|ss| [ss.name, ss.id]}
        
  .clear